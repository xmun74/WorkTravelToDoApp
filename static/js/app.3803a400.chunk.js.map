{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","check","editing","useEffect","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","console","log","getItem","s","parse","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","newToDos","Date","now","onChangeText","payload","returnKeyType","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","checkToDo","Ionicons","name","size","textBox","editDone","toDoText","autoFocus","autoCapitalize","clearTextOnFocus","marginRight","textDecorationLine","icons","editToDo","MaterialCommunityIcons","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.3803a400.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"#ff7f50\",\r\n  isworking: \"rgba(236, 204, 104,0.5)\",\r\n  grey: \"#3A3D40\",\r\n  toDoBg: \"rgba(236, 204, 104,1.0)\",\r\n  underline: \"rgba(109, 86, 65,0.4)\",\r\n  icons: \"rgba(109, 86, 65,1.0)\",\r\n  ischeck: \"rgba(109, 86, 65,0.7)\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  TextInput,\r\n  ScrollView,\r\n  Alert,\r\n  KeyboardAvoidingView,\r\n  Platform,\r\n  TouchableHighlight,\r\n  TouchableWithoutFeedback,\r\n  Pressable, //새로나온것 기능많음\r\n  Keyboard,\r\n} from \"react-native\";\r\nimport { theme } from \"./colors\";\r\nimport { Fontisto, Ionicons, MaterialCommunityIcons } from \"@expo/vector-icons\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport DismissKeyboard from \"./DismissKeyboard\";\r\n\r\nconst STORAGE_KEY = \"@toDos\";\r\n\r\nexport default function App() {\r\n  const [working, setWorking] = useState(true);\r\n  const [text, setText] = useState(\"\");\r\n  const [toDos, setToDos] = useState({});\r\n  const [check, setCheck] = useState(false);\r\n  const [editing, setediting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadToDos(); //Reload되면 함수호출\r\n  }, []);\r\n\r\n  useEffect(() => {}, [toDos]);\r\n\r\n  const travel = () => setWorking(false);\r\n  const work = () => setWorking(true);\r\n  const onChangeText = (payload) => setText(payload);\r\n\r\n  const onEditChangeText = (payload) => {\r\n    setToDos({\r\n      ...toDos,\r\n      [payload.key]: { ...toDos[payload.key], text: payload.text },\r\n    });\r\n  };\r\n\r\n  // <데이터 저장하기>\r\n  const saveToDos = async (toSave) => {\r\n    try {\r\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\r\n      // AsyncStorage - 문자열데이터만 저장가능. 객체 직렬화stringify하기\r\n      // JSON.stringify(toSave) : 현재 todos를 string으로 변경함\r\n      //(\"@key이름\", value) :key, value 다 \"\"string이어야 함, await해야함\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // <데이터 불러오기>\r\n  const loadToDos = async () => {\r\n    try {\r\n      const s = await AsyncStorage.getItem(STORAGE_KEY);\r\n      if (s) {\r\n        setToDos(JSON.parse(s));\r\n        //parse: string을 js obj로 변경\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // <추가하기>\r\n  const addToDo = async () => {\r\n    if (text === \"\") {\r\n      //input창 비어있으면 아무것도 안하기\r\n      return;\r\n    }\r\n    // obj결합 방법2. ES6문법 const Newobj = {...기존obj, 새로운obj}\r\n    const newToDos = {\r\n      ...toDos, //기존의 obj 내용 전부\r\n      [Date.now()]: { text, working, check, editing }, // 새로운 obj 생성\r\n    };\r\n    // // obj결합 방법1. Object.assign({}결합될 obj, 이전object, 새object);\r\n    // const newToDos = ({}, toDos, { [Date.now()]: { text, working } });\r\n    setToDos(newToDos); //새로쓴todo 넣기\r\n    await saveToDos(newToDos); //새로운todo를 저장하기/ AsyncStorage여서 await해야함\r\n    setText(\"\"); //전송하면 input창 비우기\r\n  };\r\n\r\n  // <삭제하기>\r\n  const deleteToDo = async (key) => {\r\n    if (Platform.OS === \"web\") {\r\n      const ok = confirm(\"Do you want to delete this To Do\");\r\n      if (ok) {\r\n        const newToDos = { ...toDos };\r\n        delete newToDos[key];\r\n        setToDos(newToDos);\r\n        saveToDos(newToDos);\r\n      }\r\n    } else {\r\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\r\n        { text: \"Cancel\" }, //취소\r\n        {\r\n          text: \"Sure\", //확인\r\n          style: \"destructive\", //버튼색상 구분 .ios만 가능\r\n          onPress: () => {\r\n            const newToDos = { ...toDos }; // 기존obj내용복사해서 생성\r\n            delete newToDos[key]; //그 obj안에 key만 삭제\r\n            setToDos(newToDos); //새로쓴todo 넣기/ 업데이트\r\n            saveToDos(newToDos); //새로운todo를 저장\r\n          },\r\n        },\r\n      ]);\r\n    }\r\n    return;\r\n  };\r\n\r\n  // <check하기>\r\n  const checkToDo = (key) => {\r\n    let newToDos = { ...toDos }; // 기존obj내용복사해서 생성\r\n    if (newToDos[key].check) {\r\n      newToDos[key].check = false;\r\n    } else {\r\n      newToDos[key].check = true;\r\n    }\r\n    setToDos(newToDos); //새로쓴todo 넣기/ 업데이트\r\n    saveToDos(newToDos); //새로운todo를 저장\r\n  };\r\n\r\n  // <수정하기>\r\n  const editToDo = (key) => {\r\n    let newToDos = { ...toDos }; // 기존obj내용복사해서 생성\r\n    if (toDos[key].text === \"\") {\r\n      newToDos[key].editing = false;\r\n    }\r\n    newToDos[key].editing = true;\r\n    setToDos(newToDos);\r\n    saveToDos(newToDos);\r\n  };\r\n\r\n  // <수정끝>\r\n  const editDone = async (key) => {\r\n    if (!toDos[key].text === \"\") {\r\n      return;\r\n    }\r\n\r\n    const newToDos = { ...toDos };\r\n    newToDos[key].editing = false;\r\n    setToDos(newToDos);\r\n    await saveToDos(newToDos);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {/* <DismissKeyboard> */}\r\n      <StatusBar style=\"light\" />\r\n      <View style={styles.header}>\r\n        <TouchableOpacity onPress={work}>\r\n          <Text\r\n            style={{\r\n              fontSize: 38,\r\n              fontWeight: \"600\",\r\n              color: working ? \"white\" : theme.isworking,\r\n            }}\r\n          >\r\n            Work\r\n          </Text>\r\n        </TouchableOpacity>\r\n        <TouchableOpacity onPress={travel}>\r\n          <Text\r\n            style={{\r\n              fontSize: 38,\r\n              fontWeight: \"600\",\r\n              color: !working ? \"white\" : theme.isworking,\r\n            }}\r\n          >\r\n            Travel\r\n          </Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      <TextInput\r\n        onSubmitEditing={addToDo} //제출버튼누를때 실행\r\n        onChangeText={onChangeText} //글자변경 감지\r\n        returnKeyType=\"done\"\r\n        value={text}\r\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\r\n        style={styles.input}\r\n        // multiline //여러줄 사용가능\r\n        // secureTextEntry //비번쓸때 사용 ***이렇게보이는 것\r\n        // autoCapitalize={\"sentences\"} //시작할떄 소문자\r\n        // keyboardType=\"\" //이메일, 번호 입력자판 넣을때\r\n      />\r\n      {/* </DismissKeyboard> */}\r\n\r\n      <ScrollView>\r\n        {/* <Work -  Travel 에 따른 todo보여주기>\r\n        Object.keys는 key값만 담긴 배열ary 반환함. ary여서 map사용가능\r\n        <toDos의 key값 접근해서 working값:저장된값>이 <state의 working값:클릭할때 변경된값>과 동일한지 체크 */}\r\n        {Object.keys(toDos).map((key) =>\r\n          toDos[key].working === working ? (\r\n            <View style={styles.toDo} key={key}>\r\n              <TouchableOpacity onPress={() => checkToDo(key)}>\r\n                <Ionicons\r\n                  name={\r\n                    toDos[key].check\r\n                      ? \"md-checkmark-circle\"\r\n                      : \"md-checkmark-circle-outline\"\r\n                  }\r\n                  size={30}\r\n                  color={toDos[key].check ? theme.icons : theme.ischeck}\r\n                />\r\n              </TouchableOpacity>\r\n              <View style={styles.textBox}>\r\n                {toDos[key].editing ? (\r\n                  <TextInput\r\n                    onSubmitEditing={() => editDone(key)}\r\n                    style={{ ...styles.textBox, ...styles.toDoText }}\r\n                    value={toDos[key].text}\r\n                    onChangeText={(text) => onEditChangeText({ key, text })}\r\n                    returnKeyType=\"done\"\r\n                    autoFocus={true}\r\n                    autoCapitalize=\"none\"\r\n                    clearTextOnFocus={true}\r\n                  />\r\n                ) : (\r\n                  <Text\r\n                    style={{\r\n                      ...styles.toDoText,\r\n                      marginRight: 10,\r\n                      color: toDos[key].check ? theme.underline : theme.icons,\r\n                      textDecorationLine: toDos[key].check\r\n                        ? \"line-through\"\r\n                        : \"none\",\r\n                    }}\r\n                  >\r\n                    {toDos[key].text}\r\n                  </Text>\r\n                )}\r\n                {toDos[key].editing ? null : (\r\n                  <TouchableOpacity\r\n                    style={{ ...styles.icons, marginRight: 10 }}\r\n                    onPress={() => editToDo(key)}\r\n                  >\r\n                    <MaterialCommunityIcons\r\n                      name=\"lead-pencil\"\r\n                      size={24}\r\n                      color={theme.icons}\r\n                    />\r\n                  </TouchableOpacity>\r\n                )}\r\n                <TouchableOpacity\r\n                  style={{ ...styles.icons }}\r\n                  onPress={() => deleteToDo(key)}\r\n                >\r\n                  <Fontisto name=\"trash\" size={18} color={theme.icons} />\r\n                </TouchableOpacity>\r\n              </View>\r\n            </View>\r\n          ) : null\r\n        )}\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: theme.bg,\r\n    paddingHorizontal: 20, //가로방향 패딩\r\n    // paddingHorizontal - css에 없는 속성\r\n  },\r\n  header: {\r\n    justifyContent: \"space-between\",\r\n    flexDirection: \"row\",\r\n    marginTop: 100,\r\n  },\r\n  input: {\r\n    backgroundColor: \"white\",\r\n    paddingVertical: 15,\r\n    paddingHorizontal: 20,\r\n    borderRadius: 30,\r\n    marginVertical: 20,\r\n    fontSize: 18,\r\n  },\r\n  toDo: {\r\n    backgroundColor: theme.toDoBg,\r\n    marginBottom: 5,\r\n    paddingVertical: 10,\r\n    paddingHorizontal: 20,\r\n    borderRadius: 15,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n  textBox: {\r\n    color: theme.icons,\r\n    backgroundColor: theme.toDoBg,\r\n    marginBottom: 5,\r\n    paddingVertical: 10,\r\n    paddingHorizontal: 20,\r\n    borderRadius: 15,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n  toDoText: {\r\n    flex: 2,\r\n    // marginLeft: 10,\r\n    fontSize: 16,\r\n    fontWeight: \"500\",\r\n  },\r\n  icons: {\r\n    marginRight: 10,\r\n    justifyContent: \"flex-start\",\r\n  },\r\n});\r\n"],"sourceRoot":""}